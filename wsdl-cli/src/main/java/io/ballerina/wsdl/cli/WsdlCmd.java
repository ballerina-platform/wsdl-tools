/*
 *  Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com)
 *
 *  WSO2 LLC. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

package io.ballerina.wsdl.cli;

import io.ballerina.cli.BLauncherCmd;
import io.ballerina.projects.util.ProjectUtils;
import io.ballerina.wsdl.core.WsdlToBallerina;
import io.ballerina.wsdl.core.WsdlToBallerinaResponse;
import io.ballerina.wsdl.core.diagnostic.DiagnosticMessage;
import io.ballerina.wsdl.core.diagnostic.DiagnosticUtils;
import io.ballerina.wsdl.core.generator.GeneratedSource;
import org.xml.sax.InputSource;
import picocli.CommandLine;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Scanner;

import javax.wsdl.Definition;
import javax.wsdl.WSDLException;
import javax.wsdl.factory.WSDLFactory;
import javax.wsdl.xml.WSDLReader;

import static io.ballerina.wsdl.cli.Messages.INVALID_DIRECTORY_PATH;
import static io.ballerina.wsdl.cli.Messages.MISSING_WSDL_PATH;
import static io.ballerina.xsd.core.visitor.XSDVisitorImpl.COLON;
import static io.ballerina.xsd.core.visitor.XSDVisitorImpl.EMPTY_STRING;
import static io.ballerina.xsd.core.visitor.XSDVisitorImpl.WHITESPACE;

/**
 * Command-line utility class for generating Ballerina source code from WSDL files.
 * It uses the specified WSDL path and optional operation names to generate the code.
 *
 * @since 0.1.0
 */
@CommandLine.Command(
        name = "wsdl",
        description = "Generate a Ballerina client and records for a given WSDL definition."
)
public class WsdlCmd implements BLauncherCmd {
    private static final String CMD_NAME = "wsdl";
    public static final String FILE_OVERWRITE_PROMPT = "The file '%s' already exists." +
            " Overwrite? [y/N]: ";
    private static final String AUTO_GENERATED_MESSAGE = "// AUTO-GENERATED FILE. DO NOT MODIFY.\n" +
            "// This file is auto-generated by the Ballerina WSDL tool.";
    private final PrintStream outStream;
    private final boolean exitWhenFinish;

    @CommandLine.Parameters(description = "Input file path of the WSDL schema")
    private List<String> inputPath = new ArrayList<>();

    @CommandLine.Option(
            names = {"--operations"},
            description = "Comma-separated operation names to generate",
            split = ","
    )
    private String[] operations;

    @CommandLine.Option(names = {"--help", "-h"})
    private boolean helpFlag;

    public static final String INVALID_BALLERINA_DIRECTORY_ERROR =
            "Invalid Ballerina package directory: %s, cannot find 'Ballerina.toml' file";

    @CommandLine.Option(names = {"-m", "--module"}, description = "The name of the module in which the Ballerina " +
            "client and record types are generated.")
    private String outputPath = "";

    @CommandLine.Option(names = {"--port", "-p"})
    private String portName = "";

    public WsdlCmd() {
        this.outStream = System.err;
        this.operations = new String[0];
        this.exitWhenFinish = true;
    }

    @Override
    public void execute() {
        if (helpFlag) {
            StringBuilder stringBuilder = new StringBuilder();
            printLongDesc(stringBuilder);
            outStream.println(stringBuilder);
            return;
        }
        Path currentDir = Paths.get("").toAbsolutePath();
        if (!ProjectUtils.isBallerinaProject(currentDir)) {
            outStream.printf(INVALID_BALLERINA_DIRECTORY_ERROR + "%n", currentDir);
            exitOnError();
            return;
        }
        if (!ProjectUtils.validateModuleName(outputPath)) {
            outStream.println("ERROR: invalid module name : '" + outputPath + "' :\n" +
                              "module name can only contain alphanumerics, underscores and periods");
            exitOnError();
            return;
        } else if (!ProjectUtils.validateNameLength(outputPath)) {
            outStream.println("ERROR: invalid module name : '" + outputPath + "' :\n" +
                              "maximum length of module name is 256 characters");
            exitOnError();
            return;
        }
        Path outputDirPath = Paths.get(outputPath);
        if (!Objects.equals(outputPath, EMPTY_STRING)) {
            Path basePath = Paths.get("modules").toAbsolutePath();
            outputDirPath = basePath.resolve(outputPath).normalize();
        }
        if (Files.exists(outputDirPath) && !Files.isDirectory(outputDirPath)) {
            outStream.printf(INVALID_DIRECTORY_PATH + "%n", outputPath);
            exitOnError();
            return;
        }
        if (inputPath.isEmpty()) {
            outStream.println(MISSING_WSDL_PATH);
            exitOnError();
            return;
        }
        try {
            if (Files.notExists(outputDirPath)) {
                Files.createDirectories(outputDirPath);
            }
            if (!Files.exists(Path.of(inputPath.get(0)))) {
                outStream.println(inputPath.get(0) + " file does not exist.");
                return;
            }
            WsdlToBallerinaResponse response = wsdlToBallerina(inputPath.get(0), outputDirPath.toString(), operations);
            if (!response.getDiagnostics().isEmpty()) {
                response.getDiagnostics().forEach(diagnostic ->
                        outStream.println(diagnostic.getSeverity() + COLON + WHITESPACE + diagnostic.message())
                );
                return;
            }
            writeSourceToFiles(response.getTypesSource());
            for (GeneratedSource generatedSource: response.getClientSources()) {
                writeSourceToFiles(generatedSource);
            }
        } catch (WSDLException e) {
            // Keep this empty to avoid duplicating the error message
        } catch (Exception e) {
            outStream.println(e.getLocalizedMessage());
            exitOnError();
        }
    }

    private void writeSourceToFiles(GeneratedSource response) throws IOException {
        Path clientPath = Paths.get(response.fileName());
        String fileName = clientPath.getFileName().toString();
        if (Files.exists(clientPath)) {
            outStream.printf(FILE_OVERWRITE_PROMPT, clientPath.getFileName().toString());
            String overwriteAccess = new Scanner(System.in).nextLine().trim().toLowerCase();
            if (overwriteAccess.equals("y")) {
                generateFile(response, clientPath, fileName);
            } else {
                outStream.printf("The operation is cancelled %n");
            }
        } else {
            generateFile(response, clientPath, fileName);
        }
    }

    private void generateFile(GeneratedSource response, Path clientPath, String fileName) throws IOException {
        String content = addAutoGeneratedMessage(response.content());
        Files.writeString(clientPath, content);
        String outputModule = getModuleName(clientPath);
        outStream.printf("The '%s' file is written to '%s' %n", fileName, outputModule);
    }

    private static String getModuleName(Path clientPath) {
        String outputModule;
        String destinationPath = clientPath.toString();
        if (destinationPath.contains("modules")) {
            int startIndex = destinationPath.indexOf("modules");
            int endIndex = destinationPath.lastIndexOf("/");
            if (endIndex > startIndex) {
                outputModule = destinationPath.substring(startIndex, endIndex);
            } else {
                outputModule = destinationPath.substring(startIndex);
            }
        } else {
            outputModule = "the default module";
        }
        return outputModule;
    }

    private String addAutoGeneratedMessage(String content) {
        return AUTO_GENERATED_MESSAGE + "\n\n" + content;
    }

    @Override
    public String getName() {
        return CMD_NAME;
    }

    @Override
    public void printLongDesc(StringBuilder out) {
        Class<?> clazz = WsdlCmd.class;
        ClassLoader classLoader = clazz.getClassLoader();
        InputStream inputStream = classLoader.getResourceAsStream("cli-docs/wsdl-help.help");
        if (inputStream != null) {
            try (InputStreamReader inputStreamREader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);
                 BufferedReader br = new BufferedReader(inputStreamREader)) {
                String content = br.readLine();
                outStream.append(content);
                while ((content = br.readLine()) != null) {
                    outStream.append('\n').append(content);
                }
            } catch (IOException e) {
                outStream.append("Helper text is not available.");
            }
        }
    }

    @Override
    public void printUsage(StringBuilder out) {

    }

    @Override
    public void setParentCmdParser(CommandLine parentCmdParser) {

    }

    /**
     * Converts a WSDL file into Ballerina source files based on the specified operations.
     *
     * @param fileName   the path to the WSDL file
     * @param operations a list of operation names to be generated
     * @throws WSDLException if generating content from the source fails
     */
    public WsdlToBallerinaResponse wsdlToBallerina(String fileName, String outputDirectory,
                                                   String[] operations) throws WSDLException {
        DiagnosticMessage message;
        WsdlToBallerinaResponse response = new WsdlToBallerinaResponse();
        List<DiagnosticMessage> diagnosticMessages = new ArrayList<>();
        try {
            File wsdlFile = new File(fileName);
            Path wsdlFilePath = Paths.get(wsdlFile.getCanonicalPath());
            String fileContent = Files.readString(wsdlFilePath);
            WsdlToBallerina wsdlToBallerina = new WsdlToBallerina();
            Definition wsdlDefinition = parseWSDLContent(fileContent);
            wsdlToBallerina.generateFromWSDL(response, wsdlDefinition, 
                                             outputDirectory, diagnosticMessages, operations, portName);
            return response;
        } catch (IOException e) {
            message = DiagnosticMessage.wsdlToBallerinaIOError(e, null);
        } catch (WSDLException e) {
            message = DiagnosticMessage.wsdlToBallerinaParserError(e, null);
        } catch (Exception e) {
            message = DiagnosticMessage.wsdlToBallerinaGeneralError(e, null);
        }
        diagnosticMessages.add(message);
        return DiagnosticUtils.getDiagnosticResponse(diagnosticMessages, response);
    }

    private Definition parseWSDLContent(String wsdlDefinitionText) throws WSDLException {
        PrintStream originalErr = System.err;
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PrintStream printStream = new PrintStream(outputStream);
        System.setErr(printStream);

        WSDLReader reader = WSDLFactory.newInstance().newWSDLReader();
        reader.setFeature("javax.wsdl.verbose", false);
        reader.setFeature("javax.wsdl.importDocuments", true);
        System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");
        InputStream wsdlStream = new ByteArrayInputStream(wsdlDefinitionText.getBytes(Charset.defaultCharset()));
        try {
            return reader.readWSDL(null, new InputSource(wsdlStream));
        } finally {
            System.setErr(originalErr);
        }
    }

    private void exitOnError() {
        if (exitWhenFinish) {
            Runtime.getRuntime().exit(1);
        }
    }
}
